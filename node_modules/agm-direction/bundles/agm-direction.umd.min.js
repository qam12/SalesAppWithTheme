!function(global,factory){"object"==typeof exports&&"undefined"!=typeof module?factory(exports,require("@angular/core"),require("rxjs")):"function"==typeof define&&define.amd?define("agm-direction",["exports","@angular/core","rxjs"],factory):factory((global.ng=global.ng||{},global.ng.angularLibraryStarter={}),global.ng.core,global.rxjs)}(this,function(exports,core,rxjs){"use strict";var extendStatics,GoogleMapsScriptProtocol,MapsAPILoader=function(){function MapsAPILoader(){}return MapsAPILoader.decorators=[{type:core.Injectable}],MapsAPILoader}(),GoogleMapsAPIWrapper=function(){function GoogleMapsAPIWrapper(_loader,_zone){var _this=this;this._loader=_loader,this._zone=_zone,this._map=new Promise(function(resolve){_this._mapResolver=resolve})}return GoogleMapsAPIWrapper.prototype.createMap=function(el,mapOptions){var _this=this;return this._zone.runOutsideAngular(function(){return _this._loader.load().then(function(){var map=new google.maps.Map(el,mapOptions);_this._mapResolver(map)})})},GoogleMapsAPIWrapper.prototype.setMapOptions=function(options){this._map.then(function(m){m.setOptions(options)})},GoogleMapsAPIWrapper.prototype.createMarker=function(options,addToMap){return void 0===options&&(options={}),void 0===addToMap&&(addToMap=!0),this._map.then(function(map){return addToMap&&(options.map=map),new google.maps.Marker(options)})},GoogleMapsAPIWrapper.prototype.createInfoWindow=function(options){return this._map.then(function(){return new google.maps.InfoWindow(options)})},GoogleMapsAPIWrapper.prototype.createCircle=function(options){return this._map.then(function(map){return options.map=map,new google.maps.Circle(options)})},GoogleMapsAPIWrapper.prototype.createPolyline=function(options){return this.getNativeMap().then(function(map){var line=new google.maps.Polyline(options);return line.setMap(map),line})},GoogleMapsAPIWrapper.prototype.createPolygon=function(options){return this.getNativeMap().then(function(map){var polygon=new google.maps.Polygon(options);return polygon.setMap(map),polygon})},GoogleMapsAPIWrapper.prototype.createDataLayer=function(options){return this._map.then(function(m){var data=new google.maps.Data(options);return data.setMap(m),data})},GoogleMapsAPIWrapper.prototype.containsLocation=function(latLng,polygon){return google.maps.geometry.poly.containsLocation(latLng,polygon)},GoogleMapsAPIWrapper.prototype.subscribeToMapEvent=function(eventName){var _this=this;return new rxjs.Observable(function(observer){_this._map.then(function(m){m.addListener(eventName,function(arg){_this._zone.run(function(){return observer.next(arg)})})})})},GoogleMapsAPIWrapper.prototype.clearInstanceListeners=function(){this._map.then(function(map){google.maps.event.clearInstanceListeners(map)})},GoogleMapsAPIWrapper.prototype.setCenter=function(latLng){return this._map.then(function(map){return map.setCenter(latLng)})},GoogleMapsAPIWrapper.prototype.getZoom=function(){return this._map.then(function(map){return map.getZoom()})},GoogleMapsAPIWrapper.prototype.getBounds=function(){return this._map.then(function(map){return map.getBounds()})},GoogleMapsAPIWrapper.prototype.getMapTypeId=function(){return this._map.then(function(map){return map.getMapTypeId()})},GoogleMapsAPIWrapper.prototype.setZoom=function(zoom){return this._map.then(function(map){return map.setZoom(zoom)})},GoogleMapsAPIWrapper.prototype.getCenter=function(){return this._map.then(function(map){return map.getCenter()})},GoogleMapsAPIWrapper.prototype.panTo=function(latLng){return this._map.then(function(map){return map.panTo(latLng)})},GoogleMapsAPIWrapper.prototype.panBy=function(x,y){return this._map.then(function(map){return map.panBy(x,y)})},GoogleMapsAPIWrapper.prototype.fitBounds=function(latLng){return this._map.then(function(map){return map.fitBounds(latLng)})},GoogleMapsAPIWrapper.prototype.panToBounds=function(latLng){return this._map.then(function(map){return map.panToBounds(latLng)})},GoogleMapsAPIWrapper.prototype.getNativeMap=function(){return this._map},GoogleMapsAPIWrapper.prototype.triggerMapEvent=function(eventName){return this._map.then(function(m){return google.maps.event.trigger(m,eventName)})},GoogleMapsAPIWrapper.decorators=[{type:core.Injectable}],GoogleMapsAPIWrapper.ctorParameters=function(){return[{type:MapsAPILoader},{type:core.NgZone}]},GoogleMapsAPIWrapper}(),WindowRef=function(){function WindowRef(){}return WindowRef.prototype.getNativeWindow=function(){return window},WindowRef}(),DocumentRef=function(){function DocumentRef(){}return DocumentRef.prototype.getNativeDocument=function(){return document},DocumentRef}(),__extends=(extendStatics=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b}||function(d,b){for(var p in b)b.hasOwnProperty(p)&&(d[p]=b[p])},function(d,b){function __(){this.constructor=d}extendStatics(d,b),d.prototype=null===b?Object.create(b):(__.prototype=b.prototype,new __)});!function(GoogleMapsScriptProtocol){GoogleMapsScriptProtocol[GoogleMapsScriptProtocol.HTTP=1]="HTTP",GoogleMapsScriptProtocol[GoogleMapsScriptProtocol.HTTPS=2]="HTTPS",GoogleMapsScriptProtocol[GoogleMapsScriptProtocol.AUTO=3]="AUTO"}(GoogleMapsScriptProtocol||(GoogleMapsScriptProtocol={}));var LAZY_MAPS_API_CONFIG=new core.InjectionToken("angular-google-maps LAZY_MAPS_API_CONFIG"),AgmDirection=(function(_super){function LazyMapsAPILoader(config,w,d){void 0===config&&(config=null);var _this=_super.call(this)||this;return _this._SCRIPT_ID="agmGoogleMapsApiScript",_this.callbackName="agmLazyMapsAPILoader",_this._config=config||{},_this._windowRef=w,_this._documentRef=d,_this}__extends(LazyMapsAPILoader,_super),LazyMapsAPILoader.prototype.load=function(){var window=this._windowRef.getNativeWindow();if(window.google&&window.google.maps)return Promise.resolve();if(this._scriptLoadingPromise)return this._scriptLoadingPromise;var scriptOnPage=this._documentRef.getNativeDocument().getElementById(this._SCRIPT_ID);if(scriptOnPage)return this._assignScriptLoadingPromise(scriptOnPage),this._scriptLoadingPromise;var script=this._documentRef.getNativeDocument().createElement("script");return script.type="text/javascript",script.async=!0,script.defer=!0,script.id=this._SCRIPT_ID,script.src=this._getScriptSrc(this.callbackName),this._assignScriptLoadingPromise(script),this._documentRef.getNativeDocument().body.appendChild(script),this._scriptLoadingPromise},LazyMapsAPILoader.prototype._assignScriptLoadingPromise=function(scriptElem){var _this=this;this._scriptLoadingPromise=new Promise(function(resolve,reject){_this._windowRef.getNativeWindow()[_this.callbackName]=function(){resolve()},scriptElem.onerror=function(error){reject(error)}})},LazyMapsAPILoader.prototype._getScriptSrc=function(callbackName){var protocol;switch(this._config&&this._config.protocol||GoogleMapsScriptProtocol.HTTPS){case GoogleMapsScriptProtocol.AUTO:protocol="";break;case GoogleMapsScriptProtocol.HTTP:protocol="http:";break;case GoogleMapsScriptProtocol.HTTPS:protocol="https:"}var hostAndPath=this._config.hostAndPath||"maps.googleapis.com/maps/api/js",queryParams={v:this._config.apiVersion||"3",callback:callbackName,key:this._config.apiKey,client:this._config.clientId,channel:this._config.channel,libraries:this._config.libraries,region:this._config.region,language:this._config.language};return protocol+"//"+hostAndPath+"?"+Object.keys(queryParams).filter(function(k){return null!=queryParams[k]}).filter(function(k){return!Array.isArray(queryParams[k])||Array.isArray(queryParams[k])&&0<queryParams[k].length}).map(function(k){var i=queryParams[k];return Array.isArray(i)?{key:k,value:i.join(",")}:{key:k,value:queryParams[k]}}).map(function(entry){return entry.key+"="+entry.value}).join("&")},LazyMapsAPILoader.decorators=[{type:core.Injectable}],LazyMapsAPILoader.ctorParameters=function(){return[{type:void 0,decorators:[{type:core.Optional},{type:core.Inject,args:[LAZY_MAPS_API_CONFIG]}]},{type:WindowRef},{type:DocumentRef}]}}(MapsAPILoader),function(){function AgmDirection(gmapsApi){this.gmapsApi=gmapsApi,this.travelMode="DRIVING",this.transitOptions=void 0,this.drivingOptions=void 0,this.waypoints=[],this.optimizeWaypoints=!0,this.provideRouteAlternatives=!1,this.avoidHighways=!1,this.avoidTolls=!1,this.visible=!0,this.onChange=new core.EventEmitter,this.onResponse=new core.EventEmitter,this.sendInfoWindow=new core.EventEmitter,this.directionsService=void 0,this.directionsDisplay=void 0,this.waypointsMarker=[],this.isFirstChange=!0}return AgmDirection.prototype.ngOnInit=function(){!0===this.visible&&this.directionDraw()},AgmDirection.prototype.ngOnChanges=function(obj){if(this.visible){if(this.isFirstChange)return void 0===this.directionsDisplay&&this.directionDraw(),void(this.isFirstChange=!1);void 0!==obj.renderOptions&&!1===obj.renderOptions.firstChange&&(void 0!==this.originMarker&&(this.originMarker.setMap(null),this.destinationMarker.setMap(null),this.waypointsMarker.forEach(function(w){return w.setMap(null)})),this.directionsDisplay.setPanel(null),this.directionsDisplay.setMap(null),this.directionsDisplay=void 0),this.directionDraw()}else try{void 0!==this.originMarker&&(this.originMarker.setMap(null),this.destinationMarker.setMap(null),this.waypointsMarker.forEach(function(w){return w.setMap(null)})),this.directionsDisplay.setPanel(null),this.directionsDisplay.setMap(null),this.directionsDisplay=void 0}catch(e){}},AgmDirection.prototype.directionDraw=function(){var _this=this;this.gmapsApi.getNativeMap().then(function(map){void 0===_this.directionsDisplay&&(_this.directionsDisplay=new google.maps.DirectionsRenderer(_this.renderOptions),_this.directionsDisplay.setMap(map),_this.directionsDisplay.addListener("directions_changed",function(){_this.onChange.emit(_this.directionsDisplay.getDirections())})),void 0===_this.directionsService&&(_this.directionsService=new google.maps.DirectionsService),void 0===_this.panel?_this.directionsDisplay.setPanel(null):_this.directionsDisplay.setPanel(_this.panel),"object"==typeof _this.renderRoute&&null!==_this.renderRoute?(_this.directionsDisplay.setDirections(_this.renderRoute),_this.renderRoute=null):_this.directionsService.route({origin:_this.origin,destination:_this.destination,travelMode:_this.travelMode,transitOptions:_this.transitOptions,drivingOptions:_this.drivingOptions,waypoints:_this.waypoints,optimizeWaypoints:_this.optimizeWaypoints,provideRouteAlternatives:_this.provideRouteAlternatives,avoidHighways:_this.avoidHighways,avoidTolls:_this.avoidTolls},function(response,status){if(_this.onResponse.emit(response),"OK"===status&&(_this.directionsDisplay.setDirections(response),void 0!==_this.markerOptions)){try{void 0!==_this.originMarker&&(google.maps.event.clearListeners(_this.originMarker,"click"),_this.originMarker.setMap(null)),void 0!==_this.destinationMarker&&(google.maps.event.clearListeners(_this.destinationMarker,"click"),_this.destinationMarker.setMap(null)),_this.waypointsMarker.forEach(function(w){void 0!==w&&(google.maps.event.clearListeners(w,"click"),w.setMap(null))})}catch(err){console.error("Can not reset custom marker.",err)}var _route_1=response.routes[0].legs[0];try{void 0!==_this.markerOptions.origin&&(_this.markerOptions.origin.map=map,_this.markerOptions.origin.position=_route_1.start_location,_this.originMarker=_this.setMarker(map,_this.originMarker,_this.markerOptions.origin,_route_1.start_address)),void 0!==_this.markerOptions.destination&&(_this.markerOptions.destination.map=map,_this.markerOptions.destination.position=_route_1.end_location,_this.destinationMarker=_this.setMarker(map,_this.destinationMarker,_this.markerOptions.destination,_route_1.end_address)),void 0!==_this.markerOptions.waypoints&&_this.waypoints.forEach(function(waypoint,index){Array.isArray(_this.markerOptions.waypoints)?(_this.markerOptions.waypoints[index].map=map,_this.markerOptions.waypoints[index].position=_route_1.via_waypoints[index],_this.waypointsMarker.push(_this.setMarker(map,waypoint,_this.markerOptions.waypoints[index],_route_1.via_waypoints[index]))):(_this.markerOptions.waypoints.map=map,_this.markerOptions.waypoints.position=_route_1.via_waypoints[index],_this.waypointsMarker.push(_this.setMarker(map,waypoint,_this.markerOptions.waypoints,_route_1.via_waypoints[index])))})}catch(err){console.error("MarkerOptions error.",err)}}})})},AgmDirection.prototype.setMarker=function(map,marker,markerOpts,content){var _this=this;return void 0===this.infoWindow&&(this.infoWindow=new google.maps.InfoWindow({}),this.sendInfoWindow.emit(this.infoWindow)),(marker=new google.maps.Marker(markerOpts)).addListener("click",function(){var infowindoContent=void 0===markerOpts.infoWindow?content:markerOpts.infoWindow;_this.infoWindow.setContent(infowindoContent),_this.infoWindow.open(map,marker)}),marker},AgmDirection.decorators=[{type:core.Directive,args:[{selector:"agm-direction"}]}],AgmDirection.ctorParameters=function(){return[{type:GoogleMapsAPIWrapper}]},AgmDirection.propDecorators={origin:[{type:core.Input}],destination:[{type:core.Input}],travelMode:[{type:core.Input}],transitOptions:[{type:core.Input}],drivingOptions:[{type:core.Input}],waypoints:[{type:core.Input}],optimizeWaypoints:[{type:core.Input}],provideRouteAlternatives:[{type:core.Input}],avoidHighways:[{type:core.Input}],avoidTolls:[{type:core.Input}],renderOptions:[{type:core.Input}],visible:[{type:core.Input}],panel:[{type:core.Input}],markerOptions:[{type:core.Input}],infoWindow:[{type:core.Input}],renderRoute:[{type:core.Input}],onChange:[{type:core.Output}],onResponse:[{type:core.Output}],sendInfoWindow:[{type:core.Output}]},AgmDirection}()),AgmDirectionModule=function(){function AgmDirectionModule(){}return AgmDirectionModule.forRoot=function(){return{ngModule:AgmDirectionModule}},AgmDirectionModule.decorators=[{type:core.NgModule,args:[{imports:[],declarations:[AgmDirection],exports:[AgmDirection]}]}],AgmDirectionModule}();exports.AgmDirectionModule=AgmDirectionModule,exports.ɵa=AgmDirection,Object.defineProperty(exports,"__esModule",{value:!0})});